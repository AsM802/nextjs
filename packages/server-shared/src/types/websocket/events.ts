import { Character } from '../character'; // Import the Character interface

export interface DiscordGuildMember {
  nickname: string
  displayName: string
  id: string
}

export interface Discord {
  guildMember?: DiscordGuildMember
  guildId?: string
  channelId?: string
}

interface InputSource {
  browser: string
  discord: Discord
}

export interface WebSocketBaseEvent<T, D> {
  type: T
  data: D
}

export type WithInputSource<Source extends keyof InputSource> = {
  [S in Source]: InputSource[S]
}

export interface WebSocketEvents<C = undefined> {
  'error': {
    message: string
  }
  'module:authenticate': {
    token: string
  }
  'module:authenticated': {
    authenticated: boolean
  }
  'module:announce': {
    name: string
    possibleEvents: Array<(keyof WebSocketEvents<C>)>
  }
  'module:configure': {
    config: C
  }
  'ui:configure': {
    moduleName: string
    moduleIndex?: number
    config: C | Record<string, unknown>
  }
  'input:text': {
    text: string
  } & Partial<WithInputSource<'browser' | 'discord'>>
  'input:text:voice': {
    transcription: string
  } & Partial<WithInputSource<'browser' | 'discord'>>
  'input:voice': {
    audio: ArrayBuffer
  } & Partial<WithInputSource<'browser' | 'discord'>>

  // New Character Events (Client to Server)
  'character:create': {
    character: Omit<Character, 'id'>; // ID will be generated by server
  };
  'character:get': {
    id: string;
  };
  'character:update': {
    id: string;
    data: Partial<Character>;
  };
  'character:delete': {
    id: string;
  };
  'voice:uploadSample': {
    characterId: string;
    audioData: string; // Base64 encoded audio
    format: string; // e.g., 'wav', 'mp3'
  };
  'voice:selectPreset': {
    characterId: string;
    presetId: string;
  };
  'emote:trigger': {
    characterId: string;
    emoteName: string;
  };

  // New Character Events (Server to Client)
  'character:created': {
    character: Character;
  };
  'character:data': {
    character: Character;
  };
  'character:updated': {
    character: Character;
  };
  'character:deleted': {
    id: string;
  };
  'voice:sampleUploaded': {
    characterId: string;
    sampleUrl: string;
  };
  'emote:triggered': {
    characterId: string;
    emoteName: string;
  };
}

export type WebSocketEvent<C = undefined> = {
  [K in keyof WebSocketEvents<C>]: WebSocketBaseEvent<K, WebSocketEvents<C>[K]>;
}[keyof WebSocketEvents<C>]
